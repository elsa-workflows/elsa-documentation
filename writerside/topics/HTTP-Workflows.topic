<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="HTTP Workflows" id="HTTP-Workflows" switcher-label="Mode">

    <link-summary>
        In this guide, we'll take a look at a workflow that can receive HTTP requests, send HTTP requests and write output to the HTTP response object.
    </link-summary>

    <p>
        In this guide, we'll take a look at a workflow that can receive HTTP requests, send HTTP requests and write output to the HTTP response object.
        Our workflow will handle inbound HTTP requests, invoke a backend API using an HTTP call, and write back the response to the client.
        As a result, we will learn how to use the following HTTP activities:
    </p>
    <list>
        <li>HttpEndpoint</li>
        <li>SendHttpRequest</li>
        <li>WriteHttpResponse</li>
        <li>SetVariable</li>
    </list>

    <chapter title="Before you start" id="before-you-start">
        <p>
            For this guide, we will need the following:
        </p>
        <list>
            <li>An <a href="Elsa-Server.topic">Elsa Server</a> project</li>
            <li switcher-key="Designer">
                <p>An <a href="Docker.topic#elsa-studio">Elsa Studio</a> instance</p>
                <include from="Snippets-Designer.topic" element-id="run-elsa-studio-docker-container" />
            </li>
        </list>
        <p>
            Please return here when you are ready.
        </p>
    </chapter>

    <chapter title="Workflow Overview" id="workflow-overview">
        <p>
            We will define a new workflow called <code>GetUser</code>.
            The purpose of the workflow is to handle inbound HTTP requests by fetching a user by a given user ID from a backend API and writing them back to the client in JSON format.
        </p>
        <p>For the backend API, we will use <a href="https://reqres.in/">reqres.in</a>, which returns fake data using real HTTP responses.</p>
        <p>Our workflow will parse the inbound HTTP request by getting the desired user ID from a route parameter and use that value to make an API call to reqres.</p>
        <p>
            The following is an example of such an HTTP request that you can try right now from your browser:
            <a href="https://reqres.in/api/users/2">https://reqres.in/api/users/2</a>
        </p>
        <p>The response should look similar to this:</p>
        <code-block lang="json">
            {
                "data": {
                    "id": 2,
                    "email": "janet.weaver@reqres.in",
                    "first_name": "Janet",
                    "last_name": "Weaver",
                    "avatar": "https://reqres.in/img/faces/2-image.jpg"
                },
                "support": {
                    "url": "https://reqres.in/#support-heading",
                    "text": "To keep ReqRes free, contributions towards server costs are appreciated!"
                }
            }
        </code-block>
        <p>Our workflow will essentially be a proxy sitting in front of the reqres API and return a portion of the response.</p>
    </chapter>

    <chapter title="Design Workflow" id="create-workflow-using-designer" switcher-key="Designer">
        <p>Follow these steps to create the workflow using Elsa Studio</p>
        <procedure>
            <step>Start Elsa Studio from your browser.</step>
            <step>Create a new workflow called <control>Get User</control></step>
            <step>
                <p>Add the following activities to the design surface:</p>
                <list>
                    <li>HTTP Endpoint</li>
                    <li>Set Variable</li>
                    <li>HTTP Request (flow)</li>
                    <li>HTTP Response (for 200 OK)</li>
                    <li>HTTP Response (for 404 Not Found)</li>
                </list>
            </step>
            <step>
                <p>Create the following variables:</p>
                <table>
                    <tr>
                        <td><control>Name</control></td>
                        <td><control>Type</control></td>
                        <td><control>Storage</control></td>
                    </tr>
                    <tr>
                        <td>RouteData</td>
                        <td>ObjectDictionary</td>
                        <td>Workflow</td>
                    </tr>
                    <tr>
                        <td>UserId</td>
                        <td>string</td>
                        <td>Workflow</td>
                    </tr>
                    <tr>
                        <td>User</td>
                        <td>Object</td>
                        <td>Workflow</td>
                    </tr>
                </table>
            </step>
            <step>
                <p>Configure the activities as follows:</p>
                <p>
                    <control>HTTP Endpoint</control>
                </p>
                <tabs>
                    <tab title="Input">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                                <td><control>Syntax</control></td>
                            </tr>
                            <tr>
                                <td>Path</td>
                                <td>users/{userid}</td>
                                <td>Default</td>
                            </tr>
                            <tr>
                                <td>Supported Methods</td>
                                <td>GET</td>
                                <td>Default</td>
                            </tr>
                        </table>
                    </tab>
                    <tab title="Output">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                            </tr>
                            <tr>
                                <td>Route Data</td>
                                <td>RouteData</td>
                            </tr>
                        </table>
                    </tab>
                    <tab title="Common">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                            </tr>
                            <tr>
                                <td>Trigger workflow</td>
                                <td>Checked</td>
                            </tr>
                        </table>
                    </tab>
                </tabs>
                <p>
                    <control>Set Variable</control>
                </p>
                <tabs>
                    <tab title="Input">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                                <td><control>Syntax</control></td>
                            </tr>
                            <tr>
                                <td>Variable</td>
                                <td>UserId</td>
                                <td>Default</td>
                            </tr>
                            <tr>
                                <td>Value</td>
                                <td>
                                    <code>return Variables.RouteData["userid"];</code>
                                </td>
                                <td>C#</td>
                            </tr>
                        </table>
                    </tab>
                </tabs>
                <p>
                    <control>HTTP Request (flow)</control>
                </p>
                <tabs>
                    <tab title="Input">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                                <td><control>Syntax</control></td>
                            </tr>
                            <tr>
                                <td>Expected Status Codes</td>
                                <td>200, 404</td>
                                <td>Default</td>
                            </tr>
                            <tr>
                                <td>Url</td>
                                <td>
                                    <code>`return $"https://reqres.in/api/users/{Variables.UserId}";`</code>
                                </td>
                                <td>C#</td>
                            </tr>
                            <tr>
                                <td>Method</td>
                                <td>GET</td>
                                <td>Default</td>
                            </tr>
                        </table>
                    </tab>
                    <tab title="Output">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                            </tr>
                            <tr>
                                <td>Parsed Content</td>
                                <td>User</td>
                            </tr>
                        </table>
                    </tab>
                </tabs>
                <p>
                    <control>HTTP Response (200)</control>
                </p>
                <tabs>
                    <tab title="Input">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                                <td><control>Syntax</control></td>
                            </tr>
                            <tr>
                                <td>Status Code</td>
                                <td>OK</td>
                                <td>Default</td>
                            </tr>
                            <tr>
                                <td>Content</td>
                                <td>
                                    <code>getUser().data</code>
                                </td>
                                <td>JavaScript</td>
                            </tr>
                        </table>
                    </tab>
                </tabs>
                <p>
                    <control>HTTP Response (404)</control>
                </p>
                <tabs>
                    <tab title="Input">
                        <table>
                            <tr>
                                <td><control>Property</control></td>
                                <td><control>Value</control></td>
                                <td><control>Syntax</control></td>
                            </tr>
                            <tr>
                                <td>Status Code</td>
                                <td>NotFound</td>
                                <td>Default</td>
                            </tr>
                            <tr>
                                <td>Content</td>
                                <td>User not found</td>
                                <td>Default</td>
                            </tr>
                        </table>
                    </tab>
                </tabs>
            </step>
            <step>
                Connect each activity to the next. Ensure that you connect the <code>200</code> and <code>404</code> outcomes of the <control>HTTP Request (flow)</control> activity to the appropriate <control>HTTP Response</control> activity.
            </step>
            <step>
                Publish the workflow.
            </step>
        </procedure>
        <p>The final result should look like this: </p>
        <img src="../images/guides/http-workflows/workflow.png" alt="Workflow" thumbnail="true" border-effect="rounded"/>
    </chapter>

    <chapter title="Create C# Workflow" id="create-workflow-using-csharp" switcher-key="Programmatic">
        <p>Follow these steps to create the workflow from code</p>
        <procedure>
            <step>
                <p>Create <path>GetUser.cs</path> and add the following code:</p>

                <path>Workflows/GetUser.cs</path>
                <code-block lang="c#" src="guides/http-workflows/GetUser.cs"/>
            </step>
        </procedure>
        <p>
            Let's go over this workflow section by section.
        </p>
        <chapter title="Workflow Variables" id="workflow-variables">
            <code-block lang="c#" src="guides/http-workflows/GetUser.cs" include-lines="15-17" />
            <p>Here, we defined 3 workflow variables.</p>
            <p>The <code>routeDataVariable</code> variable is used to capture route data output from the HTTP endpoint activity. This variable is a dictionary.</p>
            <p>The <code>userIdVariable</code> variable is used to store the user ID value that we get from the <code>routeDataVariable</code> dictionary.</p>
            <p>The <code>userVariable</code> variable is used to capture the parsed response from the reqres API call. Since reqres returns JSON content and the capturing variable is of type <code>ExpandoObject</code>, the <code>SendHttpRequest</code> activity will parse the received JSON response into an <code>ExpandoObject</code>.</p>
        </chapter>
        <chapter title="HttpEndpoint Activity" id="httpendpoint-activity">
            <code-block lang="c#" src="guides/http-workflows/GetUser.cs" include-lines="23-29" />
            <p>Here we see the <code>HttpEndpoint</code> activity being defined and configured to be a <control>trigger</control> by setting <code>CanStartWorkflow</code> to <code>true</code>.</p>
            <p>We set its <code>Path</code> property to respond to <code>users/{userid}</code>. Notice that we are using a route parameter using the name <code>userid</code>. This is the key we will use to grab the provided user ID from the inbound URL path.</p>
            <p>To capture the route data, we assign the <code>routeDataVariable</code> variable to the <code>RouteData</code> output of the activity.</p>
        </chapter>
        <chapter title="SetVariable Activity" id="setvariable-activity">
            <code-block lang="c#" src="guides/http-workflows/GetUser.cs" include-lines="30-39" />
            <p>Here we see the <code>SetVariable</code> activity defined and configured to set the <code>userIdVariable</code> variable to the dictionary entry with key <code>"userid"</code>.</p>
            <p>We set its <code>Variable</code> property to reference the <code>userIdVariable</code> variable and its <code>Value</code> property to a callback that returns the received user ID from the route data dictionary.</p>
        </chapter>
        <chapter title="SendHttpRequest Activity" id="sendhttprequest-activity">
            <code-block lang="c#" src="guides/http-workflows/GetUser.cs" include-lines="40-74" />
            <p>The <code>SendHttpRequest</code> activity is configured to send an HTTP request to the reqres API endpoint.</p>
            <p>We set its <code>Url</code> property to a URL that includes the received user ID.</p>
            <p>To capture the response, we assign its <code>ParsedContent</code> output to the <code>userVariable</code> variable.</p>
            <p>Since the caller of the workflow might provide user IDs that don't correspond to a user record in the reqres backend, we configure the activity to handle two possible HTTP status codes:</p>
            <list>
                <li>200 OK</li>
                <li>404 Not Found</li>
            </list>
            <p>For each of these possible status codes, we assign an appropriate <code>WriteHttpResponse</code> activity.</p>
            <p>for the 200 case, the WriteHttpResponse activity access the <code>data</code> field of the user response object received from reqres:</p>
            <code-block lang="c#" src="guides/http-workflows/GetUser.cs" include-lines="51-63" />
        </chapter>
    </chapter>

    <chapter title="Run Workflow" id="run-workflow">
        <if switcher-key="Designer">
            <p>Since the workflow uses the <control>HTTP Endpoint</control> activity, it will trigger when we send an HTTP request to the <path>/api/workflows/users/{userId}</path> path.</p>
            <p>Try it out by navigating to <a href="http://localhost:13000/api/workflows/users/2">http://localhost:13000/api/workflows/users/2</a>.</p>
        </if>
        <if switcher-key="Programmatic">
            <p>Since the workflow uses the <code>HttpEndpoint</code> activity, it will trigger when we send an HTTP request to the <path>/workflows/users/{userId}</path> path.</p>
            <p>Try it out by navigating to <a href="https://localhost:5001/workflows/users/2">https://localhost:5001/workflows/users/2</a>.</p>
        </if>
        <p>The response should look similar to this:</p>
        <code-block lang="json">
            {
                "id": 2,
                "email": "janet.weaver@reqres.in",
                "first_name": "Janet",
                "last_name": "Weaver",
                "avatar": "https://reqres.in/img/faces/2-image.jpg"
            }
        </code-block>
    </chapter>

    <chapter title="Summary" id="summary">
        <p switcher-key="Programmatic">In this guide, we learned how to define a workflow from code.</p>
        <p switcher-key="Designer">In this guide, we learned how to design a workflow using <a href="Docker.topic#elsa-studio"/>.</p>
        <p>We leveraged the <code>HttpEndpoint</code> activity and used is as a trigger to start the workflow.</p>
        <p>The workflow is able to read route parameters and store it in a variable, which we then used as an input to send an API call to the reqres API that in turn returns the requested user.</p>
        <p>We have also seen how to handle various responses from reqres: 200 OK and 404 Not Found</p>
        <p switcher-key="Programmatic">The source code for this guide can be found <a href="https://github.com/elsa-workflows/elsa-guides/tree/main/src/guides/http-workflows">here</a>.</p>
        <p switcher-key="Designer">The workflow created in this guide can be found <a href="https://raw.githubusercontent.com/elsa-workflows/elsa-guides/main/src/guides/http-workflows/Workflows/get-user.json">here</a>.</p>
    </chapter>

    <seealso>
        <!--Give some related links to how-to articles-->
    </seealso>
</topic>
